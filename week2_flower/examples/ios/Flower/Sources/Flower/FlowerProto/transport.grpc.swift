//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: transport.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Flower_Transport_FlowerServiceClient`, then call methods of this protocol to make API calls.
protocol Flower_Transport_FlowerServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Flower_Transport_FlowerServiceClientInterceptorFactoryProtocol? { get }

  func join(
    callOptions: CallOptions?,
    handler: @escaping (Flower_Transport_ServerMessage) -> Void
  ) -> BidirectionalStreamingCall<Flower_Transport_ClientMessage, Flower_Transport_ServerMessage>
}

extension Flower_Transport_FlowerServiceClientProtocol {
  public var serviceName: String {
    return "flower.transport.FlowerService"
  }

  /// Bidirectional streaming call to Join
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func join(
    callOptions: CallOptions? = nil,
    handler: @escaping (Flower_Transport_ServerMessage) -> Void
  ) -> BidirectionalStreamingCall<Flower_Transport_ClientMessage, Flower_Transport_ServerMessage> {
    return self.makeBidirectionalStreamingCall(
      path: "/flower.transport.FlowerService/Join",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinInterceptors() ?? [],
      handler: handler
    )
  }
}

protocol Flower_Transport_FlowerServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'join'.
  func makeJoinInterceptors() -> [ClientInterceptor<Flower_Transport_ClientMessage, Flower_Transport_ServerMessage>]
}

public final class Flower_Transport_FlowerServiceClient: Flower_Transport_FlowerServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  var interceptors: Flower_Transport_FlowerServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the flower.transport.FlowerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Flower_Transport_FlowerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
protocol Flower_Transport_FlowerServiceProvider: CallHandlerProvider {
  var interceptors: Flower_Transport_FlowerServiceServerInterceptorFactoryProtocol? { get }

  func join(context: StreamingResponseCallContext<Flower_Transport_ServerMessage>) -> EventLoopFuture<(StreamEvent<Flower_Transport_ClientMessage>) -> Void>
}

extension Flower_Transport_FlowerServiceProvider {
  public var serviceName: Substring { return "flower.transport.FlowerService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Join":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Flower_Transport_ClientMessage>(),
        responseSerializer: ProtobufSerializer<Flower_Transport_ServerMessage>(),
        interceptors: self.interceptors?.makeJoinInterceptors() ?? [],
        observerFactory: self.join(context:)
      )

    default:
      return nil
    }
  }
}

protocol Flower_Transport_FlowerServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'join'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeJoinInterceptors() -> [ServerInterceptor<Flower_Transport_ClientMessage, Flower_Transport_ServerMessage>]
}
